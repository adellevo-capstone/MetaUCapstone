{"mappings":"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","sources":["src/index.tsx","src/SpinningWheel.tsx","src/drawWheel.ts","src/utils/getSegmentAngle.ts","src/rotateCanvas.ts","src/timingFunction.ts","src/utils/getTextByMaxWidth.ts","src/utils/getTextWidth.ts","src/utils/getSegmentIndexByAngle.ts","src/hooks/useDevicePixelRatio.ts","src/utils/getDevicePixelRatio.ts","src/types.ts"],"sourcesContent":["export * from './SpinningWheel';\nexport { default } from './SpinningWheel';\nexport * from './types';\n","import React, {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport drawWheel from \"./drawWheel\";\nimport rotateCanvas from \"./rotateCanvas\";\nimport defaultTimingFunction from \"./timingFunction\";\nimport getSegmentAngle from \"./utils/getSegmentAngle\";\nimport sliceTextByMaxWidth from \"./utils/getTextByMaxWidth\";\nimport getSegmentIndexByAngle from \"./utils/getSegmentIndexByAngle\";\nimport useDevicePixelRatio from \"./hooks/useDevicePixelRatio\";\nimport type { SpinningWheelRef, WheelColors, WheelSegment } from \"./types\";\n\nconst GLOBAL_FONT = \"Roboto, Helvetica, Arial, sans-serif\";\n\nconst normalizeSegments = (\n  segments: WheelSegment[],\n  textFont: string,\n  maxTextWidth: number\n): WheelSegment[] =>\n  segments.map(({ title, ...rest }) => ({\n    title: sliceTextByMaxWidth(title, textFont, maxTextWidth),\n    ...rest,\n  }));\n\nconst getTextFont = (radius: number) =>\n  `${(12 / 200) * radius}px ${GLOBAL_FONT}`;\n\nconst defaultWheelColors: WheelColors = {\n  wheelBackground: \"#fff\",\n  text: \"rgba(0, 0, 0, 0.87)\",\n  border: \"#424242\",\n};\n\ntype Props = {\n  size: number;\n  segments: WheelSegment[];\n  wheelColors?: WheelColors;\n  spinningWheelRef?: MutableRefObject<SpinningWheelRef>;\n  timingFunction?: (n: number) => number;\n  onSegmentChange?: (index?: number) => void;\n  onSpinStart?: () => void;\n  onSpinEnd?: (winnerIndex?: number) => void;\n};\n\nconst SpinningWheel = ({\n  size,\n  segments,\n  wheelColors = defaultWheelColors,\n  spinningWheelRef,\n  timingFunction = defaultTimingFunction,\n  onSegmentChange = () => {},\n  onSpinStart = () => {},\n  onSpinEnd = () => {},\n}: Props) => {\n  const [cachedWheel, setCachedWheel] = useState<HTMLCanvasElement | null>(null);\n  const cachedWheelRef = useRef<HTMLCanvasElement | null>(null);\n\n  cachedWheelRef.current = cachedWheel;\n\n  const functions = useRef({ onSegmentChange, onSpinStart, onSpinEnd });\n\n  functions.current = { onSegmentChange, onSpinStart, onSpinEnd };\n\n  const rotationAngle = useRef(0);\n  const requestId = useRef<number | null>(null);\n  const currentSegmentIndex = useRef(0);\n  const prevTime = useRef<number | null>(null);\n  const fullTime = useRef(0);\n\n  const radius = size / 2;\n\n  const scale = useDevicePixelRatio();\n\n  useEffect(() => {\n    const canvas = document.createElement(\"canvas\");\n    const textFont = getTextFont(radius);\n    const textMaxWidth = (135 / 200) * radius;\n\n    const wheel = drawWheel({\n      canvas,\n      segments: normalizeSegments(segments, textFont, textMaxWidth),\n      size,\n      scale,\n      textFont,\n      wheelColors,\n    });\n\n    setCachedWheel(wheel);\n  }, [size, radius, segments, wheelColors, scale]);\n\n  // https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n  const canvasRef = useCallback(\n    (canvas: HTMLCanvasElement) => {\n      if (!canvas || !cachedWheel) return;\n\n      const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n      const segmentAngle = getSegmentAngle(segments.length);\n\n      canvas.width = size * scale;\n      canvas.height = size * scale;\n\n      if (requestId.current === null) {\n        window.requestAnimationFrame(() => {\n          rotateCanvas({\n            ctx,\n            canvasToRender: cachedWheel,\n            size,\n            scale,\n            rotationAngle: rotationAngle.current,\n          });\n        });\n      }\n\n      if (!spinningWheelRef) return;\n\n      const animate =\n        (secondsToSpin: number, speed: number) => (time: number) => {\n          // first draw\n          if (prevTime.current === null) {\n            currentSegmentIndex.current = getSegmentIndexByAngle(\n              rotationAngle.current,\n              segmentAngle\n            );\n            prevTime.current = time;\n          }\n\n          const deltaTime = time - prevTime.current;\n\n          prevTime.current = time;\n          fullTime.current += deltaTime;\n\n          if (fullTime.current > secondsToSpin * 1000) {\n            functions.current.onSpinEnd(currentSegmentIndex.current);\n            stopSpinning();\n\n            return;\n          }\n\n          const thisSegmentIndex = getSegmentIndexByAngle(\n            rotationAngle.current,\n            segmentAngle\n          );\n\n          if (currentSegmentIndex.current !== thisSegmentIndex) {\n            currentSegmentIndex.current = thisSegmentIndex;\n\n            functions.current.onSegmentChange(thisSegmentIndex);\n          }\n\n          // NOTE: in \"variableI\" letter \"I\" means UnitInterval - [0, 1)\n\n          const timeI = fullTime.current / (secondsToSpin * 1000);\n          const speedI = timingFunction(timeI);\n          const deltaAngle = ((2 * Math.PI) / 360) * speedI * speed;\n\n          rotationAngle.current += deltaAngle;\n\n          rotateCanvas({\n            ctx,\n            canvasToRender: cachedWheelRef.current!,\n            size,\n            scale,\n            rotationAngle: rotationAngle.current,\n          });\n\n          requestId.current = window.requestAnimationFrame(\n            animate(secondsToSpin, speed)\n          );\n        };\n\n      function startSpinning(secondsToSpin: number, speed: number) {\n        functions.current.onSpinStart();\n\n        rotationAngle.current = 0;\n        currentSegmentIndex.current = 0;\n        prevTime.current = null;\n        fullTime.current = 0;\n        requestId.current = window.requestAnimationFrame(\n          animate(secondsToSpin, speed)\n        );\n      }\n\n      function stopSpinning() {\n        if (requestId.current) {\n          window.cancelAnimationFrame(requestId.current);\n        }\n\n        requestId.current = null;\n      }\n\n      spinningWheelRef.current = { startSpinning, stopSpinning };\n    },\n    [cachedWheel]\n  );\n\n  return (\n    <canvas\n      width={size}\n      height={size}\n      style={{ width: size, height: size }}\n      ref={canvasRef}\n    />\n  );\n};\n\nexport default SpinningWheel;\n","import getSegmentAngle from \"./utils/getSegmentAngle\";\nimport type { WheelColors, WheelSegment } from \"./types\";\n\nconst LINE_WIDTH = 4;\n\nconst meanAngleDeg = (angle1: number, angle2: number) =>\n  Math.atan2(\n    (Math.sin(angle1) + Math.sin(angle2)) / 2,\n    (Math.cos(angle1) + Math.cos(angle2)) / 2\n  );\n\nconst getX = (offset: number, radius: number, angle: number) =>\n  offset + radius * Math.sin(angle);\n\nconst getY = (offset: number, radius: number, angle: number) =>\n  offset + radius * Math.cos(angle);\n\ntype DrawWheelArgs = {\n  canvas: HTMLCanvasElement;\n  segments: WheelSegment[];\n  size: number;\n  scale: number;\n  textFont: string;\n  wheelColors: WheelColors;\n};\n\nconst drawWheel = ({\n  canvas,\n  segments,\n  size,\n  scale,\n  textFont,\n  wheelColors,\n}: DrawWheelArgs) => {\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  const radius = size / 2;\n  const textOffset = (20 / 200) * radius;\n\n  const segmentAngle = getSegmentAngle(segments.length);\n\n  canvas.width = size * scale;\n  canvas.height = size * scale;\n\n  ctx.scale(scale, scale);\n  ctx.clearRect(0, 0, size, size);\n\n  // circle background\n  ctx.arc(radius, radius, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = wheelColors.wheelBackground;\n  ctx.fill();\n\n  // segments background\n  for (let i = 0; i < segments.length; i += 1) {\n    const segment = segments[i];\n\n    ctx.fillStyle = segment.backgroundColor || wheelColors.wheelBackground;\n    ctx.strokeStyle = wheelColors.border;\n\n    ctx.beginPath();\n    ctx.arc(radius, radius, radius, segmentAngle * i, segmentAngle * (i + 1));\n    ctx.lineTo(radius, radius);\n    ctx.fill();\n  }\n\n  // circle border\n  ctx.beginPath();\n  ctx.arc(radius, radius, radius - LINE_WIDTH / 2, 0, 2 * Math.PI);\n  ctx.strokeStyle = wheelColors.border;\n  ctx.lineWidth = LINE_WIDTH;\n  ctx.stroke();\n\n  // segment borders\n  ctx.beginPath();\n\n  for (let i = 0; i < segments.length; i += 1) {\n    const fullSegmentAngle = -(i * segmentAngle) + Math.PI / 2;\n\n    const lineX = getX(radius, radius, fullSegmentAngle);\n    const lineY = getY(radius, radius, fullSegmentAngle);\n\n    ctx.moveTo(lineX, lineY);\n    ctx.lineTo(radius, radius);\n  }\n\n  ctx.stroke();\n\n  // segments text\n  ctx.font = textFont;\n\n  for (let i = 0; i < segments.length; i += 1) {\n    const segment = segments[segments.length - 1 - i];\n\n    ctx.fillStyle = segment.textColor || wheelColors.text;\n\n    const from = -(i * segmentAngle) + Math.PI / 2 + Math.PI;\n    const to = -((i + 1) * segmentAngle) + Math.PI / 2 + Math.PI;\n\n    const meanAngle = meanAngleDeg(from, to);\n    const textAngleRotation = meanAngle + Math.PI;\n    const textAngle = -meanAngle;\n    const textX = getX(radius, radius - textOffset, textAngle);\n    const textY = getY(radius, radius - textOffset, textAngle);\n\n    ctx.save();\n    ctx.translate(textX, textY);\n    ctx.rotate(textAngleRotation);\n    ctx.rotate(Math.PI / 2);\n    ctx.fillText(segment.title, 0, 4);\n    ctx.restore();\n  }\n\n  return canvas;\n};\n\nexport default drawWheel;\n","const getSegmentAngle = (segmentsCount: number) =>\n  (2 * Math.PI) / segmentsCount;\n\nexport default getSegmentAngle;\n","type RotateCanvasArgs = {\n  ctx: CanvasRenderingContext2D;\n  canvasToRender: HTMLCanvasElement;\n  size: number;\n  rotationAngle: number;\n  scale: number;\n};\n\nconst rotateCanvas = ({\n  ctx,\n  canvasToRender,\n  size,\n  scale,\n  rotationAngle,\n}: RotateCanvasArgs) => {\n  if (!ctx || !canvasToRender) return;\n\n  const radius = size / 2;\n\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.scale(scale, scale);\n  ctx.clearRect(0, 0, size, size);\n\n  ctx.translate(radius, radius);\n  ctx.rotate(rotationAngle);\n  ctx.translate(-radius, -radius);\n\n  ctx.drawImage(canvasToRender, 0, 0, size, size);\n};\n\nexport default rotateCanvas;\n","// https://github.com/d3/d3-ease/blob/main/src/math.js\nconst tpmt = (x: number) => {\n  return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;\n}\n\n// https://github.com/d3/d3-ease/blob/main/src/exp.js\nconst expOut = (t: number) => {\n  return 1 - tpmt(t);\n}\n\nconst timingFunction = expOut;\n\nexport default timingFunction;\n","import getTextWidth from './getTextWidth';\n\nconst sliceTextByMaxWidth = (text: string, font: string, maxWidth: number) => {\n  const width = getTextWidth(text, font);\n\n  if (width < maxWidth) return text;\n\n  let beginCursor = 0;\n  let endCursor = text.length;\n  let cursor = Math.floor(text.length / 2);\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const textSlice = `${text.slice(0, cursor)}...`;\n\n    const w = getTextWidth(textSlice, font);\n\n    if (w > maxWidth) {\n      endCursor = cursor;\n    } else {\n      beginCursor = cursor;\n    }\n\n    // middle between the beginCursor and the endCursor\n    cursor = beginCursor + Math.floor((endCursor - beginCursor) / 2);\n\n    if (beginCursor === cursor) return textSlice;\n  }\n};\n\nexport default sliceTextByMaxWidth;\n","let canvas: HTMLCanvasElement | null = null;\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text: string, font: string) => {\n  if (!canvas) canvas = document.createElement('canvas');\n\n  const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n  context.font = font;\n\n  const metrics = context.measureText(text);\n\n  return metrics.width;\n};\n\nexport default getTextWidth;\n","const getSegmentIndexByAngle = (\n  /** Angle from 0 to Math.PI * 2 */\n  rotationAngle: number,\n  segmentAngle: number,\n) => {\n  // TODO:\n  const normalizedAngle =\n    Math.abs((rotationAngle % (Math.PI * 2)) - Math.PI * 2) + Math.PI;\n\n  return Math.floor((normalizedAngle % (Math.PI * 2)) / segmentAngle);\n};\n\nexport default getSegmentIndexByAngle;\n","import { useEffect, useState } from \"react\";\nimport getDevicePixelRatio from \"../utils/getDevicePixelRatio\";\n\nconst useDevicePixelRatio = () => {\n  const [scale, setScale] = useState(getDevicePixelRatio);\n\n  useEffect(() => {\n    const handleResize = () => setScale(getDevicePixelRatio());\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return scale;\n};\n\nexport default useDevicePixelRatio;\n","const getDevicePixelRatio = () =>\n  typeof window === 'undefined' ? 1 : window.devicePixelRatio || 1;\n\nexport default getDevicePixelRatio;\n","export type WheelSegment = {\n  title: string;\n  textColor?: string;\n  backgroundColor?: string;\n};\n\nexport type WheelColors = {\n  wheelBackground: string;\n  text: string;\n  border: string;\n};\n\nexport type WheelDrawState = {\n  ctx: CanvasRenderingContext2D | null | undefined;\n  segments: WheelSegment[];\n  radius: number;\n  wheelColors: WheelColors;\n  textFont: string;\n  /** Full canvas rotation angle [0, Math.PI * 2] */\n  rotationAngle: number;\n  /** Angle of the one segment */\n  segmentAngle: number;\n  scale: number;\n};\n\nexport type SpinningWheelRef = {\n  startSpinning: (secondsToSpin: number, speed: number) => void;\n  stopSpinning: () => void;\n};\n"],"names":[],"version":3,"file":"main.js.map"}